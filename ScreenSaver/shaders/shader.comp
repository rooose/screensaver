#version 450

const float screenRes = 1024;

struct FluidNoise {
    float noise;
    vec2 gradient;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer NoiseSSBOIn {
   FluidNoise noiseIn[ ]; // local_size_y X local_size_x
};

layout(std140, binding = 2) buffer NoiseSSBOOut {
   FluidNoise noiseOut[ ]; // local_size_y X local_size_x
};

// local_size_n = work group size = number of items in work group ( = 64)
layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// psrdnoise2.glsl, version 2021-12-02
// Copyright (c) 2021 Stefan Gustavson and Ian McEwan
// (stefan.gustavson@liu.se, ijm567@gmail.com)
// Published under the MIT license, see:
// https://opensource.org/licenses/MIT

float psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)
{
    // 2. Transform input point to find simplex "base" i0.
    vec2 uv = vec2(x.x+x.y*0.5, x.y);
    vec2 i0 = floor(uv), f0 = fract(uv);

    // 3. Enumerate simplex corners and transform back.
    float cmp = step(f0.y, f0.x);
    vec2 o1 = vec2(cmp, 1.0-cmp);
    vec2 i1 = i0 + o1, i2 = i0 + 1.0;
    vec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);
    vec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);
    vec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);

    // 4. Compute distances to corners before we wrap them.
    vec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;
    vec3 iu, iv, xw, yw;

    // 5, 6. wrap to period and adjust i0, i1, i2 accordingly.
    if(any(greaterThan(period, vec2(0.0)))) {
        xw = vec3(v0.x, v1.x, v2.x); yw = vec3(v0.y, v1.y, v2.y);
        if(period.x > 0.0)
            xw = mod(vec3(v0.x, v1.x, v2.x), period.x);
        if(period.y > 0.0)
            yw = mod(vec3(v0.y, v1.y, v2.y), period.y);
        iu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);
    } else {
        iu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);
    }

    // 7. Compute the hash for each of the simplex corners.
    vec3 hash = mod(iu, 289.0);
    hash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);
    hash = mod((hash*34.0 + 10.0)*hash, 289.0);

    // 8, 9a. Generate the gradients with an optional rotation.
    vec3 psi = hash*0.07482 + alpha;// + ubo.deltaTime;
    vec3 gx = cos(psi); vec3 gy = sin(psi);
    vec2 g0 = vec2(gx.x, gy.x);
    vec2 g1 = vec2(gx.y, gy.y);
    vec2 g2 = vec2(gx.z, gy.z);

    // 10. Compute radial falloff.
    vec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));
    w = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;

    // 11. Linear ramp along gradient (by a scalar product)
    vec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));

    // 12, 13. Multiply and sum up noise terms.
    float n = dot(w4, gdotx);

    // 14. Compute first-order partial derivatives.
    vec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;
    vec2 dn0 = w4.x*g0 + dw.x*x0;
    vec2 dn1 = w4.y*g1 + dw.y*x1;
    vec2 dn2 = w4.z*g2 + dw.z*x2;
    gradient = 10.9*(dn0 + dn1 + dn2);

    // Scale the noise value to [-1,1] (empirical factor).
    return 10.9*n;
}


float waveEquation(float amplitude, vec2 D, vec2 xy, float wavelength, float speed, bool isCircular) {
    
    float frequency = 2./wavelength;
    float phase = frequency * speed;

    if (isCircular) {
        vec2 diff = xy - D;
        if (diff == vec2(0.,0.)) {
            D = vec2(0,0);
        } else 
            D = normalize(diff);
    }

    return amplitude * sin(dot(D, xy) * frequency + ubo.deltaTime * phase);
}

void main()
{
    // gl_GlobalInvocationID.x = [0, res - 1]
    // gl_GlobalInvocationID.y = [0, res - 1]
    // gl_NumWorkGroups.x = res * res / work group size
    // gl_WorkGroupSize.x = 8 * 8 * 1
    // equivalent a: x + (y * length)

    float x = 2 * (gl_GlobalInvocationID.x / screenRes) - 1.; // [-1 to 1]
    float y = 2 * (gl_GlobalInvocationID.y / screenRes) - 1.; // [-1 to 1]
    
    uint idx = gl_GlobalInvocationID.x + (gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x);
//    int rand_idx = int(9 * random(gl_GlobalInvocationID.xy));


    vec2 pos = vec2(x,y);
    noiseOut[idx].gradient = noiseIn[idx].gradient;
    float n = 1.5 * psrdnoise(pos, vec2(4., 4.), ubo.deltaTime, noiseOut[idx].gradient) + waveEquation(0.5, vec2(0, 0), pos, 0.08, -0.25, true) + waveEquation(1., vec2(0.5, 2.), pos, .3, -0.5, false); // [-1, 1];
    noiseOut[idx].noise = ((n / 3.) + 1.) / 2.;
}
